#################################################################################################
# # –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
# from dotenv import load_dotenv, find_dotenv
# from os import getenv
# # –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è aiogram
# import asyncio
# import logging
# from aiogram import Bot, Dispatcher, types
# from aiogram.filters.command import Command
# from aiogram import F
# # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
# from aiogram.enums import ParseMode

# # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç
# load_dotenv(find_dotenv())
# TOKEN = getenv("BOT_TOKEN")

# # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# logging.basicConfig(level=logging.INFO)
# # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
# bot = Bot(token=TOKEN)
# # –î–∏—Å–ø–µ—Ç—á–µ—Ä
# dp = Dispatcher()

# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
# @dp.message(F.text, Command("start"))
# async def cmd_start(message: types.Message):
#     await message.answer("–ü—Ä–∏–≤–µ—Ç *–ë–æ—Å—Å*\!", parse_mode=ParseMode.MARKDOWN_V2)

# # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
# async def main():
#     await dp.start_polling(bot)

# if __name__ == "__main__":
#     asyncio.run(main())

#################################################################################################
# –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–æ–¥–∏–º–æ–≥–æ —Ç–µ–∫—Å–∞ —Å –ø–æ–º–æ—â—å—é aiogram.utils.formating

# from dotenv import load_dotenv, find_dotenv
# from os import getenv

# import asyncio
# import logging
# from aiogram import Bot, Dispatcher, types
# from aiogram.filters.command import Command

# from aiogram.utils.formatting import Bold, as_list, as_marked_section, as_key_value, HashTag

# load_dotenv(find_dotenv())
# TOKEN = getenv("BOT_TOKEN")

# # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# logging.basicConfig(level=logging.INFO)
# # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
# bot = Bot(token=TOKEN)
# # –î–∏—Å–ø–µ—Ç—á–µ—Ä
# dp = Dispatcher()

# @dp.message(Command("start"))
# async def cmd_start(message: types.Message):
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
#     content = as_list(
#         as_marked_section(
#             Bold("–£—Å–ø–µ—à–Ω–æ:"),
#             "–¢–µ—Å—Ç 1",
#             "–¢–µ—Å—Ç 3",
#             "–¢–µ—Å—Ç 4",
#             marker="‚úÖ ",
#         ),
#         as_marked_section(
#             Bold("–û—à–∏–±–∫–∞:"),
#             "–¢–µ—Å—Ç 2",
#             marker="‚ùå ",
#         ),
#         as_marked_section(
#             Bold("–ò—Ç–æ–≥–æ:"),
#             as_key_value("  –í—Å–µ–≥–æ", 4),
#             as_key_value("  –£—Å–ø–µ—à–Ω–æ", 3),
#             as_key_value("  –û—à–∏–±–∫–∞", 1),
#             marker=" ",
#         ),
#         HashTag("#test"),
#         sep="\n\n",
#     )
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
#     await message.answer(**content.as_kwargs())

# if __name__ == "__main__":
#       asyncio.run(dp.start_polling(bot))

#################################################################################################
# # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –Ω–∞–≤–µ—à–µ–Ω—ã–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º  
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1 
# @dp.message(Command("test1"))
# async def cmd_test1(message: types.Message):
#     await message.reply("Test 1")


# # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –≤—ã–∑–æ–≤–æ–º –º–µ—Ç–æ–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
# async def cmd_test2(message: types.Message):
#     await message.reply("Test 2")

# # –ì–¥–µ-—Ç–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main():
# dp.message.register(cmd_test2, Command("test2"))


# if __name__ == "__main__":
#     asyncio.run(main())

##################################################################################################
# # C–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã `/start` –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º:
# # –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
# from dotenv import load_dotenv, find_dotenv
# from os import getenv
# # –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è aiogram
# import asyncio
# import logging
# from aiogram import Bot, Dispatcher, types
# from aiogram.filters.command import CommandStart

# # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç
# load_dotenv(find_dotenv())
# TOKEN = getenv("BOT_TOKEN")

# # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# logging.basicConfig(level=logging.INFO)

# bot = Bot(token=TOKEN) # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç
# dp = Dispatcher() # –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä	 

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
# @dp.message(CommandStart())  # –õ–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¢–û–õ–¨–ö–û —Å –∫–æ–º–∞–Ω–¥–æ–π /start
# async def cmd_start(message: types.Message):
#     await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –Ω–æ–≤—ã–π –±–æ—Ç. –†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!")
    
# # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
# async def main():
#     await dp.start_polling(bot)

# if __name__ == "__main__":
#     asyncio.run(main()) # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main()


# # ##################################################################################################
# # C–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã `/help` —Å —Ä–æ—É—Ç–µ—Ä–æ–º:
# # –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
# from dotenv import load_dotenv, find_dotenv
# from os import getenv
# # –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è aiogram
# import asyncio
# import logging
# from aiogram import Bot, Dispatcher, types, Router
# from aiogram.filters.command import Command

# # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç
# load_dotenv(find_dotenv())
# TOKEN = getenv("BOT_TOKEN")

# # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# logging.basicConfig(level=logging.INFO)

# bot = Bot(token=TOKEN) # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç
# dp = Dispatcher() # –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä	 

# router = Router()  # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
# dp.include_router(router) # –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—à —Ä–æ—É—Ç–µ—Ä —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
# @router.message(Command("help"))  # –õ–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¢–û–õ–¨–ö–û —Å –∫–æ–º–∞–Ω–¥–æ–π /help
# async def cmd_help(message: types.Message):
#     help_text = "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
#     help_text += "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
#     help_text += "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
#     help_text += "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π"
#     await message.answer(help_text)
    
# # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
# async def main():
#     await dp.start_polling(bot)

# if __name__ == "__main__":
#     asyncio.run(main()) # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main()

#################################################################################################
# –ü—Ä–∏–º–µ—Ä —Å –æ–¥–Ω–∏–º —Ä–æ—É—Ç–µ—Ä–æ–º –∏ —Ç—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
# –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
from dotenv import load_dotenv, find_dotenv
from os import getenv
# –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è aiogram
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters.command import Command,CommandStart

# –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç
load_dotenv(find_dotenv())
TOKEN = getenv("BOT_TOKEN")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN) # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç
dp = Dispatcher() # –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä	 

commands_router = Router()  # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
dp.include_router(commands_router) # –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—à —Ä–æ—É—Ç–µ—Ä —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@commands_router.message(CommandStart())  # –õ–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¢–û–õ–¨–ö–û —Å –∫–æ–º–∞–Ω–¥–æ–π /start
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –Ω–æ–≤—ã–π –±–æ—Ç. –†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@commands_router.message(Command("help"))  # –õ–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¢–û–õ–¨–ö–û —Å –∫–æ–º–∞–Ω–¥–æ–π /help
async def cmd_help(message: types.Message):
    help_text = "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
    help_text += "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    help_text += "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
    help_text += "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π"
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@commands_router.message(Command("menu"))
async def cmd_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
    
# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main()

#################################################################################################